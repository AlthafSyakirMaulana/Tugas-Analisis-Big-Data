# Pipeline: FreecurrencyAPI → Kafka (ZooKeeper) → Postgres → Airflow
services:
  postgres:
    image: postgres:16-alpine
    container_name: pg
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: raw
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d raw"]
      interval: 5s
      timeout: 3s
      retries: 20

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports: ["2181:2181"]
    healthcheck:
      test: ["CMD-SHELL", "bash -lc '</dev/tcp/127.0.0.1/2181' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
    ports: ["9092:9092"]
    volumes:
      - kafkadata:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list >/dev/null 2>&1"]
      interval: 5s
      timeout: 3s
      retries: 40

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports: ["8085:8080"]
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  kafka-setup:
    image: bitnami/kafka:3.7
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash","-lc"]
    command: >
      "
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic currency.raw --partitions 3 --replication-factor 1;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic currency.dlq --partitions 1 --replication-factor 1;
      "

  airflow:
    image: apache/airflow:2.9.1
    container_name: airflow
    user: "50000:0"
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: "5"
      AIRFLOW_CONN_POSTGRES_RAW: postgresql+psycopg2://postgres:postgres@postgres:5432/raw
      
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow_requirements.txt:/requirements.txt
    entrypoint: >
      /bin/bash -lc "
      pip install --no-cache-dir -r /requirements.txt || true;
      airflow db migrate &&
      airflow users create --role Admin --username admin --password admin --firstname a --lastname b --email admin@example.com || true &&
      airflow webserver & airflow scheduler
      "
    ports: ["8080:8080"]

  producer-currency:
    build: ./producers/currency
    container_name: producer-currency
    env_file:
      - .env
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      TOPIC: currency.raw
      FREECURRENCY_URL: https://api.freecurrencyapi.com/v1/latest
      BASE_CURRENCY: USD
      CURRENCIES: EUR,USD,CAD
      FETCH_INTERVAL_SEC: "60"
    depends_on:
      kafka:
        condition: service_healthy

  consumer-currency:
    build: ./consumers/currency
    container_name: consumer-currency
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      TOPIC: currency.raw
      DLQ_TOPIC: currency.dlq
      PG_HOST: postgres
      PG_DB: raw
      PG_USER: postgres
      PG_PASSWORD: postgres
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

volumes:
  pgdata:
  kafkadata:
